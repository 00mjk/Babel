#!/bin/sh
# purpose:
# This script checks the output of babel's toolcheck.log
# generated by (possibly crashed) configure and prints
# a user-friendly message if an error occured, as well
# as exiting with a non-zero status.
#
# If this script returns 0, babel configure did not
# crash and toolcheck.log or config.status can be
# queried to determine what babel found in particular.
#
# usage: $0 babel-builddir
#
if ! test "x$#" = "x1"; then
	echo "$0: usage: $0 <babel-builddir>"
	exit 2
fi
if ! test -d $1; then
	echo "$0: usage: $0 <babel-builddir>"
	echo "$0: $1 does not appear to be a directory"
	exit 2
fi
if ! test -f $1/toolcheck.log; then
	echo "$0: usage: $0 <babel-builddir>"
	echo "$0: $1 does not appear to contain the configure output file toolcheck.log"
	exit 2
fi

lfile=$1/toolcheck.log
vars=`cat $lfile | grep '=unchecked' |sed -e 's/diagnose_//g' -e 's/=.*//g' `
diagvars=`cat $lfile | grep '=unchecked' |sed -e 's/=.*//g' `
result=0

function printvars() {
	echo -n "Babel configure checked vars are:"
	for n in $vars; do
		echo -n "$n ";
	done
	echo ""
}

function printprecheckvalues() {
	echo "Values found before configure tests:"
	cat $lfile | grep _precheckvalue |sed -e 's/diagnose_//g' -e 's/_precheckvalue=/=/g'
	echo ""
}

function printvalues() {
	echo "Computed values summary: "
	cat $lfile | grep _value |sed -e 's/diagnose_//g' -e 's/_value=/=/g'
}

# debugging functions:
# printvars
# printprecheckvalues
# printvalues

# for checked things, make sure they passed. checked things always have the
# crashed_in_check line in the output. success adds a checked line as well.
# ignore unchecked things.
for i in $diagvars; do
	j=`grep "$i=crashed_in_check" $lfile`
	k=`grep "$i=checked" $lfile`
	v=`echo $i |sed -e 's/diagnose_//g'`
	if ! test "x$k" = "x$i=checked"; then
		# hmm, checked is missing.
		if test "x$j" = "x$i=crashed_in_check"; then
			# it died checking
			echo "$i: babel configure crashed while checking $v."
			result=1;
		fi
	fi
done
exit $result

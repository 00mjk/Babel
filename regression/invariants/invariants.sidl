// Copyright (c) 2011, Lawrence Livermore National Security
// Produced at the Lawrence Livermore National Laboratory.
// Written by the Components Team <components@llnl.gov>
// UCRL-CODE-2002-054
// All rights reserved.
// 
// This file is part of Babel. For more information, see
// http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
// for Our Notice and the LICENSE file for the GNU Lesser General Public
// License.
// 
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License (as published by
// the Free Software Foundation) version 2.1 dated February 1999.
// 
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
// conditions of the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//
////////////////////////////////////////////////////////////////////////
//

package knapsack version 1.0
{
  /**
   * Expected Exception (Client-side Helper).  Provided as an aid
   * for clients when processing exceptions within general exception
   * handling routines.  MUST include all exceptions defined here.
   */
  enum ExpectExcept {
    /** NoneExp = No exception expected */
    NoneExp,
    /** BWExp = Bad (i.e., non-positive) Weight exception expected */
    BWExp,
    /** SizeExp = Size (limit exceeded) exception expected */
    SizeExp,
    /** ExcExp = A basic exception expected */
    ExcExp,
    /** InvExp = Invariant Violation exception expected */
    InvExp,
    /** PostExp = Postcondition Violation exception expected */
    PostExp,
    /** PreExp = Precondition Violation exception expected */
    PreExp
  }

  /*
   * This is the base knapsack exception.  It is here to facilitate
   * catching the other types of exceptions.
   */
  class kExcept extends sidl.SIDLException {
  }

  /*
   * This exception is thrown by the implementation if the maximum 
   * knapsack size (in terms of number of entries) is exceeded.
   */
  class kSizeExcept extends kExcept {
  }

  /*
   * This exception is thrown by the implementation if a value is 
   * determined to be negative when it should not be.
   */
  class kBadWeightExcept extends kExcept {
  }

  /**
   * iKnapsack:  An interface defining a set of methods in support of
   * a simplified implementation of the knapsack problem.  The goal
   * is to determine if a subset of provided weights total exactly the
   * target sum.
   */
  interface iKnapsack {
    /**
     * The knapsack should only hold positive weights.
     */
    invariant 
      all_pos_weights : onlyPosWeights();

    /**
     * Initialize the knapsack with the specified weights, w.
     */
    void initialize(in array<int> w)
      throws
        sidl.PreViolation, sidl.PostViolation, sidl.InvViolation, 
        kExcept, kBadWeightExcept, kSizeExcept;
      require 
        is_1d_array : (w != null) implies (dimen(w) == 1); 
        pos_weights : (w != null) implies all(w > 0);
      ensure
        has_new_weights : hasWeights(w);

    /**
     * Return TRUE if all weights in the knapsack are positive;
     * otherwise, return FALSE.
     */
    bool onlyPosWeights()
      throws
        sidl.InvViolation, kExcept;
      ensure
        side_effect_free:  is pure;

    /**
     * Return TRUE if all of the specified weights, w, are in the knapsack
     * or there are no specified weights; otherwise, return FALSE.
     */
    bool hasWeights(in array<int> w)
      throws
        sidl.PreViolation, sidl.InvViolation, kExcept;
      require 
        is_1d_array : (w != null) implies (dimen(w) == 1); 
        pos_weights : (w != null) implies all(w > 0);
      ensure
        side_effect_free:  is pure;


    /**
     * Return TRUE if there is a solution for the specified target
     * weight; otherwise, return FALSE.  Recall a solution is a
     * subset of weights that total exactly to the specified target
     * weight.
     */
    bool hasSolution(in int t)
      throws
        sidl.PreViolation, sidl.InvViolation, kExcept;
      require 
        pos_target : t > 0;
      ensure
        side_effect_free:  is pure;
  } /* Interface: iKnapsack */

  /**
   * gKnapsack:  A good implementation of the knapsack interface.
   */
  class gKnapsack implements-all iKnapsack {
  } /* Class: gKnapsack */

  /**
   * npKnapsack:  An implementation of knapsack that allows non-positive
   * weights.
   */
  class npKnapsack implements-all iKnapsack {
  } /* Class: npKnapsack */

  /**
   * nwKnapsack:  An implementation of knapsack that drops about half 
   * of the input weights.
   */
  class nwKnapsack implements-all iKnapsack {
  } /* Class: nwKnapsack */


} /* knapsack.sidl */

# make_web_installcheck.sh -*- sh -*-
#
# OVERVIEW:
#     This script tests the SVN repository and packaging
#     of the Babel code.  It is intended to be run only
#     on the "official" development platforms.  This script
#     will only do ./configure, make all install installcheck.
#
# REQUIREMENTS:
#     This script assumes several environment variables are
#     set appropriately.  It is normal usage for the envoker of
#     this script to source some other platform specific 
#     configuration file and then envoke this script.
#
#     URL (directory where babel distribution can be found)
#     SH
#     PACKAGE
#     SNAPSHOT_NUMBER
#     PATH
#     LD_LIBRARY_PATH (or equivalent)
#     CLASSPATH
#     SVN
#     SVNROOT
#     MAKE
#     MAKE_FLAGS
#     MAIL
#     PERL
#     ACLOCAL
#     AUTOMAKE
#     AUTOCONF
#     CONFIG_FLAGS
#     CD
#     MKDIR
#     CC
#     CFLAGS
#     CXX
#     CXXFLAGS
#     F77
#     FFLAGS
#     CHGRP
#     TESTGID
#     CHMOD
#     MV

umask 007
date
echo "Host: " `hostname`
gcc --version
echo "************ rm -rf $PACKAGE ************"
$CHGRP -f ${TESTGID} .
$CHMOD -f ug+rwx .
if test -d $PACKAGE; then
  $CHGRP -Rf ${TESTGID} $PACKAGE
  $CHMOD -Rf ug+rwX $PACKAGE
  olddir=$PACKAGE.old
  if test -d $olddir; then
    $CHGRP -Rf ${TESTGID} $olddir ; $CHMOD -Rf ug+rwX $olddir; rm -rf $olddir
      if test -d $olddir; then
	for in in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	  if test -d $olddir.$i; then
	    $CHGRP -Rf ${TESTGID} $olddir.$i ; $CHMOD -Rf ug+rwX $olddir.$i; rm -rf $olddir.$i
	  else
	    olddir=$olddir.$i
	    break
	  fi
	done
      fi
    fi
  $MV -f $PACKAGE $olddir
  rm -rf $olddir
  unset olddir
fi

mkdir $PACKAGE
cd $PACKAGE
PACKAGEDIR=$PACKAGE
echo "************ Wait for ${URL}/${PACKAGE}-nightly.tar.gz ************"
if wget --no-cache --tries 16 --wait 10m ${URL}/${PACKAGE}-nightly.tar.gz && wget --no-cache --tries 16 --wait 10m ${URL}/${PACKAGE}-nightly.tar.gz.sig && gpg --verify ${PACKAGE}-nightly.tar.gz.sig ${PACKAGE}-nightly.tar.gz ; then
  tar --file ${PACKAGE}-nightly.tar.gz --ungzip --extract
  echo "************ Retrieval succeeded and GPG signature passed ************"
  CONFIGURE=`pwd`/${PACKAGEDIR}-${SNAPSHOT_NUMBER}/configure
  if test -e $CONFIGURE ; then
    found="true"
  else
    echo "************ Nightly tarball is not from today - trying yesterday ************"
    export SNAPSHOT_NUMBER=`date -d yesterday '+%Y%m%d' 2>/dev/null`
    if test -z "$SNAPSHOT_NUMBER"; then
      export SNAPSHOT_NUMBER=`python -c "from time import localtime,strftime,time;print strftime('%Y%m%d', localtime(time()-24*60*60))" 2>/dev/null`
    fi
    if test -n "$SNAPSHOT_NUMBER"; then
      CONFIGURE=`pwd`/${PACKAGEDIR}-${SNAPSHOT_NUMBER}/configure
      if test -e $CONFIGURE ; then
	found="true"
	echo "************ Using yesterday's nightly tarball ************"
      fi
    fi
  fi
else
  echo "************ Retrieval failed or GPG signature failed ************"
  found="false"
fi
t=`date`
if test "$found" == "true"; then 
  echo "****** $CONFIGURE found at $t ******"
else
  echo "****** $CONFIGURE not found at $t ******"
  exit 1
fi

echo "************ configure  ************"
mkdir build
$CD build
${CONFIGURE} -C --prefix=${PWD}/_inst ${CONFIG_FLAGS} \
    CC="$CC" CFLAGS="$CFLAGS" CXX="$CXX" CXXFLAGS="$CXXFLAGS" F77="$F77" FFLAGS="$FFLAGS" FC="$FC" FCFLAGS="$FCFLAGS" CPP="$CPP" CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS"

if test $? -ne 0; then 
	  echo '****** configure failed ******'
	  exit 1
fi


# Those flags are stored in the Makefiles generated by configure
# anyway; if we do not unset them here, the Python module build step
# will use the wrong set of flags if the CC that Python was built with
# is not the Babel CC
unset CFLAGS CXXFLAGS FFLAGS FCFLAGS CPPFLAGS LDFLAGS

echo "************ $MAKE $MAKE_FLAGS all ************"
$MAKE $MAKE_FLAGS all
if test $? -ne 0; then 
    echo "****** $MAKE $MAKE_FLAGS all failed ******"
    exit 1
fi 

echo "************ $MAKE $MAKE_FLAGS install ************"
$MAKE $MAKE_FLAGS SESSION=${SESSION} install
if test $? -ne 0; then 
    echo "****** $MAKE $MAKE_FLAGS install failed ******"
    exit 1
fi

echo "************ $MAKE $MAKE_FLAGS PYFLAGS=-x${XML_ARCHIVE} installcheck ************"
$MAKE $MAKE_FLAGS SESSION=${SESSION}  PYFLAGS=-x${XML_ARCHIVE} installcheck
if test $? -ne 0; then 
    echo "****** $MAKE $MAKE_FLAGS installcheck failed ******"
    exit 1
fi

exit 0

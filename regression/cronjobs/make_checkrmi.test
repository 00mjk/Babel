# make_checkrmi.sh -*- sh -*-
#
# OVERVIEW:
#     This script tests the SVN repository and packaging
#     of the Babel code.  It is intended to be run only
#     on the "official" development platforms.  This script
#     will only do ./configure, make all, make check.
#
# REQUIREMENTS:
#     This script assumes several environment variables are
#     set appropriately.  It is normal usage for the envoker of
#     this script to source some other platform specific 
#     configuration file and then envoke this script.
#
#     SH
#     PACKAGE
#     SNAPSHOT_NUMBER
#     PATH
#     LD_LIBRARY_PATH (or equivalent)
#     CLASSPATH
#     SVN
#     SVNROOT
#     MAKE
#     MAKE_FLAGS
#     MAIL
#     PERL
#     ACLOCAL
#     AUTOMAKE
#     AUTOCONF
#     CONFIG_FLAGS
#     CD
#     MKDIR
#     CC
#     CFLAGS
#     CXX
#     CXXFLAGS
#     F77
#     FFLAGS
#     CHGRP
#     TESTGID
#     CHMOD
#     MV

umask 007

date
echo "Host: " `hostname`
gcc --version
echo "************ rm -rf $PACKAGE ************"
$CHGRP -f ${TESTGID} .
$CHMOD -f ug+rwx .
if test -d $PACKAGE; then
  $CHGRP -Rf ${TESTGID} $PACKAGE
  $CHMOD -Rf ug+rwX $PACKAGE
  olddir=$PACKAGE.old
  if test -d $olddir; then
    $CHGRP -Rf ${TESTGID} $olddir ; $CHMOD -Rf ug+rwX $olddir; rm -rf $olddir
      if test -d $olddir; then
	for in in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	  if test -d $olddir.$i; then
	    $CHGRP -Rf ${TESTGID} $olddir.$i ; $CHMOD -Rf ug+rwX $olddir.$i; rm -rf $olddir.$i
	  else
	    olddir=$olddir.$i
	    break
	  fi
	done
      fi
    fi
  $MV -f $PACKAGE $olddir
  rm -rf $olddir
  unset olddir
fi

# XML_ARCHIVE=`pwd`/babel/regression/gauntlet_archive.xml
echo "XML_ARCHIVE=$XML_ARCHIVE" > .xml_loc
	
echo "********************** PHASE I **********************"
echo "***"
echo "*** configure, make all check clean (same directory) "
echo "***"
echo "***"

echo "************ ENVIRONMENT VARIABLES ************"
source ${HOME}/bin/babel-cvs-`hostname -s`.settings 
# sets SSH_AUTH_SOCK & SSH_AGENT_PID
echo `set`


echo "************ $SVN checkout $PACKAGE ************"
$SVN checkout $SVNROOT $PACKAGE
if test $? -ne 0; then 
	echo '****** SVN checkout failed ******'
	exit 1
fi
$CHGRP -Rf ${TESTGID} $PACKAGE

echo "************ configure  ************"
$CD $PACKAGE
./autotool_rebuild.sh
if test $? -ne 0; then 
	  echo '****** autotool_rebuild.sh failed ******'
	  exit 1
fi
sh fix_timestamps.sh

./configure -C --prefix=${PWD}/_inst --enable-maintainer-mode ${CONFIG_FLAGS} \
    CC="$CC" CFLAGS="$CFLAGS" CXX="$CXX" CXXFLAGS="$CXXFLAGS" F77="$F77" FFLAGS="$FFLAGS" FC="$FC" FCFLAGS="$FCFLAGS" CPP="$CPP" CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS"
if test $? -ne 0; then 
	  echo '****** configure failed ******'
	  exit 1
fi

# Those flags are stored in the Makefiles generated by configure
# anyway; if we do not unset them here, the Python module build step
# will use the wrong set of flags if the CC that Python was built with
# is not the Babel CC
unset CFLAGS CXXFLAGS FFLAGS FCFLAGS CPPFLAGS LDFLAGS


echo "************ $MAKE $MAKE_FLAGS all ************"
$MAKE $MAKE_FLAGS all
if test $? -ne 0; then 
	  echo "****** $MAKE $MAKE_FLAGS all failed ******"
	  exit 1
fi 

$MAKE $MAKE_FLAGS check
# ignore the result

echo "************ $MAKE $MAKE_FLAGS check-rmi ************"
cd regression && $MAKE $MAKE_FLAGS SESSION=${SESSION} PYFLAGS=-x${XML_ARCHIVE} check-rmi
if test $? -ne 0; then 
    echo "****** $MAKE $MAKE_FLAGS check-rmi failed ******"
    exit 1
fi


exit 0

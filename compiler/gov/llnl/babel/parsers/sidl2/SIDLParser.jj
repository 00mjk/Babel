/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./SIDLParser.jj */
/*@egen*/
options {
  STATIC=false;                                                              
}

PARSER_BEGIN(SIDLParser)

package gov.llnl.babel.parsers.sidl2;

public class SIDLParser/*@bgen(jjtree)*/implements SIDLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSIDLParserState jjtree = new JJTSIDLParserState();

/*@egen*/}

PARSER_END(SIDLParser)


/* WHITE SPACE */
SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"] > { input_stream.backup(1); } : IN_DOC_COMMENT 
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_DOC_COMMENT>
SPECIAL_TOKEN :
{
  <DOC_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_DOC_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* BASIC TYPES */
TOKEN : { 
   < VOID           : "void" >
 | < ARRAY          : "array" >
 | < RARRAY	    : "rarray" >
 | < BOOLEAN        : "bool" >
 | < CHAR           : "char" >
 | < DCOMPLEX       : "dcomplex" >
 | < DOUBLE         : "double" >
 | < FCOMPLEX       : "fcomplex" >
 | < FLOAT          : "float" >
 | < INT            : "int" >
 | < LONG           : "long" >
 | < OPAQUE         : "opaque" >
 | < STRING         : "string" >
}

/* USER DEFINED TYPES */
TOKEN : { 
   < CLASS          : "class" >
 | < ENUM           : "enum" >
 | < STRUCT         : "struct" > 
 | < INTERFACE      : "interface" >
} 

/* RESERVED WORDS */
TOKEN : {
   < ABSTRACT       : "abstract" >
 | < LOGICAL_AND    : "and" >
 | < COPY           : "copy" >
 | < COLUMN_MAJOR   : "column-major" > 
 | < ELSE           : "else" >
 | < ENSURE         : "ensure" >
 | < EXTENDS        : "extends" >
 | < FINAL          : "final" >
 | < FROM           : "from" > 
 | < IFF            : "iff" > 
 | < IMPLEMENTS     : "implements" >
 | < IMPLEMENTS_ALL : "implements-all" >
 | < IMPLIES        : "implies" > 
 | < IMPORT         : "import" >
 | < IN             : "in" >
 | < INOUT          : "inout" >
 | < INVARIANT      : "invariant" >
 | < IS             : "is" > 
 | < LOCAL          : "local" >
 | < MODULUS        : "mod" > 
 | < NOT            : "not" >
 | < NULL           : "null" > 
 | < NONBLOCKING    : "nonblocking" >
 | < ONEWAY         : "oneway" >
 | < ORDER          : "order" >
 | < LOGICAL_OR     : "or" >
 | < OUT            : "out" >
 | < PACKAGE        : "package" >
 | < PURE           : "pure" > 
 | < REMAINDER      : "rem" >
 | < REQUIRE        : "require" >
 | < RESULT         : "result" > 
 | < ROW_MAJOR      : "row-major" > 
 | < STATIC         : "static" >
 | < THEN           : "then" >
 | < THROWS         : "throws" >
 | < VERSION        : "version" >
 | < LOGICAL_XOR    : "xor" > 
}


/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER      : <LETTER> ( <LETTER> | <DIGIT> | "_" )* >
| < EXTENSION       : <LBRACKET> ( <LETTER> | <DIGIT> | "_")+ <RBRACKET> > 
| < VERSION_STRING  : (<DIGIT>)+ <DOT> (<DIGIT>)+ ( <DOT> ( <DIGIT> )+ )+ > 
| < #LETTER         : ["a"-"z","A"-"Z"] > 
| < #DIGIT          : ["0"-"9"] > 
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* SPECIAL MODES */
TOKEN : 
{
  <ATTRIB_BEGIN : "%attrib{" > : IN_ATTRIB_LIST
}

<IN_ATTRIB_LIST>
TOKEN : 
{ 
  < ATTRIB_ID      : <LETTER> ( <LETTER> | <DIGIT> | "_")* >
| < ATTRIB_STRING :
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < ATTRIB_EQ : "=" >
| < ATTRIB_COMMA : "," >
| < ATTRIB_END : "}" > : DEFAULT
}

<IN_ATTRIB_LIST>
SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < BITWISE_AND: "&" >
| < BITWISE_XOR: "^" >
| < COLON: ":" >
| < EQ: "==" >
| < GE: ">=" >
| < GT: ">" >
| < LE: "<=" >
| < LT: "<" >
| < MINUS: "-" >
| < NE: "!=" >
| < BITWISE_OR: "|" >
| < PLUS: "+" >
| < POWER : "**" > 
| < SLASH: "/" >
| < STAR: "*" >
| < TILDE: "~" >
| < LSHIFT: "<<<" >
| < RSHIFT: ">>>" > 
}

/* LITERALS */
TOKEN :
{
  < BOOLEAN_LITERAL : <FALSE> | <TRUE> > 
| < #FALSE          : "false">
| < #TRUE           : "true">
| < INTEGER_LITERAL :
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL    : "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL  : "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <SIMPLE_FLOATING_POINT_LITERAL> <EXPONENT> (["f","F","d","D"])?
      | <SIMPLE_FLOATING_POINT_LITERAL> (<EXPONENT>)? ["f","F","d","D"]
      | (["0"-"9"])+ <DOT> (<EXPONENT>)? (["f","F","d","D"])?
      | <DOT> (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
| < SIMPLE_FLOATING_POINT_LITERAL : 
           (["0"-"9"])+ <DOT> (["0"-"9"])+ >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

SimpleNode Start()        : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  ( Require() )* ( Import() )* ( UserType() )*  <EOF>/*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                      }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Version() : {/*@bgen(jjtree) Version */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Version */
  try {
/*@egen*/
  <VERSION> ( <VERSION_STRING> | <SIMPLE_FLOATING_POINT_LITERAL> | <DECIMAL_LITERAL> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { jjtn000.name=token.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Require() : {/*@bgen(jjtree) Require */
  SimpleNode jjtn000 = new SimpleNode(this, JJTREQUIRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Require */
  try {
/*@egen*/
  <REQUIRE> ScopedID() Version() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Import() : {/*@bgen(jjtree) Import */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Import */
  try {
/*@egen*/
  <IMPORT> ScopedID() [ Version() ] <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Package() : {/*@bgen(jjtree) Package */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPACKAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Package */
 try {
/*@egen*/
 <PACKAGE> Name()
 [ Version() ] 
 <LBRACE> ( UserType() )* <RBRACE> [ <SEMICOLON> ]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void UserType() : {/*@bgen(jjtree) UserType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUSERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserType */
  try {
/*@egen*/
  [/*@bgen(jjtree) TypeAttrs */
    {
      SimpleNode jjtn001 = new SimpleNode(this, JJTTYPEATTRS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ (TypeAttr() | CustomAttrList())+/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/ ]
  ( Class() 
  | Interface()
  | Package()
  | Struct()
  | Enum()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void TypeAttr() : {/*@bgen(jjtree) TypeAttr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPEATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeAttr */
  try {
/*@egen*/
  <FINAL> | <ABSTRACT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Enum() : {/*@bgen(jjtree) Enum */
  SimpleNode jjtn000 = new SimpleNode(this, JJTENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Enum */
  try {
/*@egen*/
  <ENUM> Name()
  <LBRACE> Enumerator() ( LOOKAHEAD(2) <COMMA> Enumerator() )*  [ <COMMA> ] <RBRACE> [ <SEMICOLON> ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Enumerator() : {/*@bgen(jjtree) Enumerator */
  SimpleNode jjtn000 = new SimpleNode(this, JJTENUMERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Enumerator */
  try {
/*@egen*/
  Name() [ <ASSIGN> Integer() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Struct() : {/*@bgen(jjtree) Struct */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Struct */
  try {
/*@egen*/
  <STRUCT> Name()
  <LBRACE> ( StructItem() )* <RBRACE> [ <SEMICOLON> ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StructItem()  :{/*@bgen(jjtree) StructItem */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTRUCTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StructItem */
   try {
/*@egen*/
   ( ( Type() Name() ) | Rarray() ) <SEMICOLON>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  //Type() Name() <SEMICOLON>
}

void Class () : {/*@bgen(jjtree) Class */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Class */
  try {
/*@egen*/
  <CLASS> Name()
  [ ExtendsOne() ]
  (ImplementsList() | ImplementsAllList() )*
  <LBRACE>  ( Invariants() )*  ( Method() )* <RBRACE> [<SEMICOLON>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Interface () : {/*@bgen(jjtree) Interface */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTERFACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Interface */
  try {
/*@egen*/
  <INTERFACE> Name() 
  [ ExtendsList() ] 
  <LBRACE>  ( Invariants() )* ( Method() )* <RBRACE> [<SEMICOLON>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExtendsOne() : {/*@bgen(jjtree) ExtendsOne */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXTENDSONE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtendsOne */
  try {
/*@egen*/
  <EXTENDS> ScopedID()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExtendsList() : {/*@bgen(jjtree) ExtendsList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXTENDSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtendsList */
  try {
/*@egen*/ 
  <EXTENDS> ScopedID() ( <COMMA> ScopedID() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImplementsList() : {/*@bgen(jjtree) ImplementsList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImplementsList */
  try {
/*@egen*/
  <IMPLEMENTS> ScopedID() ( <COMMA> ScopedID() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImplementsAllList() : {/*@bgen(jjtree) ImplementsAllList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIMPLEMENTSALLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImplementsAllList */
  try {
/*@egen*/ 
  <IMPLEMENTS_ALL> ScopedID() ( <COMMA> ScopedID() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Method() : {/*@bgen(jjtree) Method */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Method */
  try {
/*@egen*/ 
  [/*@bgen(jjtree) MethodAttrs */
    {
      SimpleNode jjtn001 = new SimpleNode(this, JJTMETHODATTRS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ (MethodAttr() | CustomAttrList() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/ ]
  (/*@bgen(jjtree) ReturnType */
    {
      SimpleNode jjtn002 = new SimpleNode(this, JJTRETURNTYPE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/ | <VOID> )
  MethodName()
  <LPAREN> [ ArgList() ] <RPAREN>
  [ ExceptClause() ]
  [ FromClause () ]
  <SEMICOLON> 
  ( Requires() )* 
  ( Ensures() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void MethodAttr() : {/*@bgen(jjtree) MethodAttr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMETHODATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodAttr */
  try {
/*@egen*/
  <ONEWAY> | <LOCAL> | <STATIC> | <ABSTRACT> | <FINAL> | <NONBLOCKING> | <COPY>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodName() : {/*@bgen(jjtree) MethodName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMETHODNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodName */
  try {
/*@egen*//*@bgen(jjtree) ShortName */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTSHORTNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ 
  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/ [ Extension() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExceptClause() : {/*@bgen(jjtree) ExceptClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXCEPTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExceptClause */
  try {
/*@egen*/
  <THROWS> ScopedID() ( <COMMA> ScopedID() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void FromClause() : {/*@bgen(jjtree) FromClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromClause */
  try {
/*@egen*/
  <FROM> ScopedID()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Invariants() : {/*@bgen(jjtree) Invariants */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINVARIANTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Invariants */
  try {
/*@egen*/
  <INVARIANT> ( LOOKAHEAD( Assertion() ) Assertion() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Requires() : {/*@bgen(jjtree) Requires */
  SimpleNode jjtn000 = new SimpleNode(this, JJTREQUIRES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Requires */
  try {
/*@egen*/
  <REQUIRE> ( LOOKAHEAD( Assertion() ) Assertion() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Ensures() : {/*@bgen(jjtree) Ensures */
  SimpleNode jjtn000 = new SimpleNode(this, JJTENSURES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Ensures */
  try {
/*@egen*/
  <ENSURE> ( LOOKAHEAD( Assertion() ) Assertion() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Assertion() : {/*@bgen(jjtree) Assertion */
  SimpleNode jjtn000 = new SimpleNode(this, JJTASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assertion */
  try {
/*@egen*/

  [
    LOOKAHEAD( Identifier() <COLON> )/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn001 = new SimpleNode(this, JJTNAME);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ 
    (Identifier())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/ <COLON> 
  ] 
  AssertExpr() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArgList() : {/*@bgen(jjtree) ArgList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
  try {
/*@egen*/
  Arg() ( <COMMA> Arg() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Arg() : {/*@bgen(jjtree) Arg */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arg */
  try {
/*@egen*/ 
  [/*@bgen(jjtree) ArgAttrs */
    {
      SimpleNode jjtn001 = new SimpleNode(this, JJTARGATTRS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ ( ArgAttr() | CustomAttrList() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/ ]
  Mode() ( ( Type() Name() ) | Rarray() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArgAttr() : {/*@bgen(jjtree) ArgAttr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgAttr */
  try {
/*@egen*/
  <COPY>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CustomAttrList()       : {}
{
  <ATTRIB_BEGIN> CustomAttr() (<ATTRIB_COMMA> CustomAttr())* <ATTRIB_END>
}

void CustomAttr() : {/*@bgen(jjtree) CustomAttr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCUSTOMATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CustomAttr */
  try {
/*@egen*/
  <ATTRIB_ID> (<ATTRIB_EQ> <ATTRIB_STRING>)?/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Mode() : {/*@bgen(jjtree) Mode */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mode */
  try {
/*@egen*/
  <IN> | <OUT> | <INOUT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void Type()       : {}
{
  PrimativeType() | Array() | ScopedID()
}

void PrimativeType() : {/*@bgen(jjtree) PrimativeType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRIMATIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimativeType */
  try {
/*@egen*/
  <BOOLEAN> | <CHAR> | <INT> | <LONG> | <FLOAT> | <DOUBLE>
| <FCOMPLEX> | <DCOMPLEX> | <STRING> | <OPAQUE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Array() : {/*@bgen(jjtree) Array */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Array */
  try {
/*@egen*/
  <ARRAY> <LT> 
  [/*@bgen(jjtree) ScalarType */
    {
      SimpleNode jjtn001 = new SimpleNode(this, JJTSCALARTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ (PrimativeType() | ScopedID() )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/
    [ LOOKAHEAD(2) <COMMA>/*@bgen(jjtree) Dimension */
                           {
                             SimpleNode jjtn002 = new SimpleNode(this, JJTDIMENSION);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*/ <INTEGER_LITERAL>/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/ ]
    [ <COMMA>/*@bgen(jjtree) Orientation */
              {
                SimpleNode jjtn003 = new SimpleNode(this, JJTORIENTATION);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/ ( "row-major" | "column-major" )/*@bgen(jjtree)*/
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
              }
/*@egen*/ ] 
  ]
 <GT>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Rarray() : {/*@bgen(jjtree) Rarray */
                 SimpleNode jjtn000 = new SimpleNode(this, JJTRARRAY);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Node n;}
{/*@bgen(jjtree) Rarray */
  try {
/*@egen*/
  <RARRAY> <LT>/*@bgen(jjtree) ScalarType */
    {
      SimpleNode jjtn001 = new SimpleNode(this, JJTSCALARTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ 
    ( PrimativeType() )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/
    [ <COMMA>/*@bgen(jjtree) Dimension */
              {
                SimpleNode jjtn002 = new SimpleNode(this, JJTDIMENSION);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ <INTEGER_LITERAL>/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/ ]
  <GT> 
  Name() {n=jjtree.popNode();} // squirrel this ID until later
  <LPAREN> Extents() <RPAREN>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtree.pushNode(n);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void Extents() : {/*@bgen(jjtree) Extents */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXTENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Extents */
  try {
/*@egen*/
  Extent() ( <COMMA> Extent() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Extent() : {/*@bgen(jjtree) Extent */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Extent */
  try {
/*@egen*/
  SimpleIntExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SimpleIntExpression()       : {}
{/*@bgen(jjtree) #Add(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( SimpleIntTerm() 
    ( ( <PLUS> | <MINUS> ) {jjtn001.name += (token.image + "\\");}
       SimpleIntTerm() 
    )* 
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void SimpleIntTerm()       : {}
{/*@bgen(jjtree) #Mult(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( SimpleIntPrimary() 
    ( (<STAR> | <SLASH> ) {jjtn001.name += (token.image + "\\");}
      SimpleIntPrimary() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void SimpleIntPrimary()       : {}
{
  Name() | Integer() | ( "(" SimpleIntExpression() ")" )
}

void AssertExpr()       : {}
{/*@bgen(jjtree) #Implication(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTIMPLICATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( 
    OrExpr() [ ( <IMPLIES> | <IFF> ) {jjtn001.name += (token.image + "\\");} OrExpr() ]
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/ 
} 

void OrExpr ()       : {}
{/*@bgen(jjtree) #Or(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ 
  ( 
    AndExpr() ( ( <LOGICAL_OR> | <LOGICAL_XOR> ) {jjtn001.name += (token.image + "\\");} AndExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
} 

void AndExpr()       : {}
{/*@bgen(jjtree) #And(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ 
  ( 
    BitwiseExpr() ( <LOGICAL_AND> {jjtn001.name += (token.image + "\\");} BitwiseExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void BitwiseExpr()       : {}
{/*@bgen(jjtree) #Bitwise(> 1) */
   {
     SimpleNode jjtn001 = new SimpleNode(this, JJTBITWISE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   ( 
     EqualityExpr() ( ( <BITWISE_AND> | <BITWISE_OR> | <BITWISE_XOR> ) { jjtn001.name += (token.image + "\\"); } EqualityExpr() )*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void EqualityExpr()       : {}
{/*@bgen(jjtree) #Equality(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTEQUALITY);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( 
    RelationalExpr() ( ( <EQ> | <NE> ) {jjtn001.name += (token.image + "\\");} RelationalExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void RelationalExpr()       : {}
{/*@bgen(jjtree) #GtLt(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTGTLT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ 
  ( 
    ShiftExpr() ( ( <LT> | <GT> | <LE> | <GE> ) {jjtn001.name += (token.image + "\\");} ShiftExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
} 

void ShiftExpr()       : {}
{/*@bgen(jjtree) #Shift(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTSHIFT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ 
  ( 
    AddExpr() ( ( <LSHIFT> | <RSHIFT> )  {jjtn001.name += (token.image + "\\");}  AddExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AddExpr()       : {}
{/*@bgen(jjtree) #Add(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    MultExpr() 
    ( ( "+" | "-" ) {jjtn001.name += (token.image+"\\");} MultExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}
 
void MultExpr()       : {}
{/*@bgen(jjtree) #Mult(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    PowerExpr()
    ( ( "*" | "/" | "%" | "rem" ) {jjtn001.name+=(token.image + "\\");} PowerExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void PowerExpr()       : {}
{/*@bgen(jjtree) #Power(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(this, JJTPOWER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryExpr()
    ( <POWER> {jjtn001.name+= (token.image + "\\");} UnaryExpr() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}
 
void UnaryExpr()       : {}

{
  (/*@bgen(jjtree) Unary */
    {
      SimpleNode jjtn001 = new SimpleNode(this, JJTUNARY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ((<IS> | <NOT> | <TILDE>) {jjtn001.name+= (token.image);}  FuncEval())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/
    | FuncEval()
  )
}

void FuncEval()       : {}
{
 ( 
   LOOKAHEAD( Identifier() <LPAREN> )/*@bgen(jjtree) Func */
                                      {
                                        SimpleNode jjtn001 = new SimpleNode(this, JJTFUNC);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*/ ( Identifier() {jjtn001.name+= (token.image);} <LPAREN>  [ FuncArgs() ] <RPAREN> )/*@bgen(jjtree)*/
                                      } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte001;
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          throw (ParseException)jjte001;
                                        }
                                        throw (Error)jjte001;
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
                                      }
/*@egen*/
|  PrimaryExpr()
 )
} 

void FuncArgs() : {/*@bgen(jjtree) FuncArgs */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncArgs */
  try {
/*@egen*/
  OrExpr() ( <COMMA> OrExpr() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrimaryExpr()       : {}
{ 
  LOOKAHEAD(Identifier())/*@bgen(jjtree) Name */
                          {
                            SimpleNode jjtn001 = new SimpleNode(this, JJTNAME);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ (Identifier())/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/  | Literal() | ( "(" OrExpr() ")" )
} 
 
void ScopedID() : {/*@bgen(jjtree) ScopedID */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCOPEDID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ScopedID */
  try {
/*@egen*/ 
  ( 
    [ (<DOT>) ] <IDENTIFIER> ( <DOT>  <IDENTIFIER> )* [ <EXTENSION> ]
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Name() : {/*@bgen(jjtree) Name */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Name */
        try {
/*@egen*/
	Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Identifier()       : {}
{
  <IDENTIFIER> 
} 

void Extension() : {/*@bgen(jjtree) Extension */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXTENSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Extension */
 try {
/*@egen*/
 <EXTENSION>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Literal() : {/*@bgen(jjtree) Literal */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
   try {
/*@egen*/ 
   Number() | Complex() 
   | <NULL>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.name+= (token.image);} 
   | <PURE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.name+= (token.image);} 
   | <RESULT>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.name+= (token.image);} 
   | <BOOLEAN_LITERAL>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.name+= (token.image);} 
   | <CHARACTER_LITERAL>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.name+= (token.image);} 
   | <STRING_LITERAL>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.name+= (token.image);}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  
} 

void Complex() : {/*@bgen(jjtree) Complex */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPLEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Complex */
  try {
/*@egen*/
  <LBRACE> Number() <COMMA> Number() <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
                                                                  
void Number() : {/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  [ <PLUS> | <MINUS> ]
  ( <INTEGER_LITERAL> | <SIMPLE_FLOATING_POINT_LITERAL> | <FLOATING_POINT_LITERAL> )/*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                       jjtc000 = false;
                                                                                     }
/*@egen*/ { jjtn000.name = jjtn000.name.toLowerCase(); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Integer() : {/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  [ <PLUS> | <MINUS> ] <INTEGER_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
